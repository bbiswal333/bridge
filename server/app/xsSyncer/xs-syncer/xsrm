#!/usr/bin/env node

"use strict";
/* global console */

var settingsParser = require('./lib/settings_parser.js'),
    repo           = require('./lib/repo'),
    readline       = require('readline'),
    log            = require('./lib/log');


function exit(msg) {
    console.log(msg);
    process.exit();
}

function assertOrExit(cond, msg) {
    if (! cond )
        exit(msg);
}

var argv = require('optimist')
    .usage('Usage: $0 --conf <config-file> --ws <workspace-name> <repository-objects>')
    .demand('conf')
    .describe('conf', 'location of configuration file')
    .boolean('dontask')
    .describe('dontask', 'Flag to skip initial confirmation')
    .describe('ws', 'Workspace Id')
    .describe('active', 'Delete the active version')
    .boolean('active')
    .argv;

var objectsToDelete = argv._;
assertOrExit(objectsToDelete.length > 0, "Invalid input: No repo objects to delete given");


var settings = settingsParser(argv.conf);
var hanaInstance = settings.hanaInstance;

if (argv.ws && argv.active ) {
    exit("Invalid options: cannot pass workspace with active flag");
}

hanaInstance.workspaceId = argv.ws || hanaInstance.workspaceId;

var xsRepo = repo(hanaInstance);

removeRepoObject();

function doIt() {
    var baseQuery;
    if ( ! argv.active ) {
        baseQuery = {
            method : 'delete',
            SapBackPack : {
                Workspace      : hanaInstance.workspaceId
            }
        };
    }
    else {
        baseQuery = {
            method : 'delete'
        };
    }

    var numDone = 0;
    var numCalls = objectsToDelete.length;

    log.info("Deleting. Hang on, this may take a while");

    objectsToDelete.forEach(function (repoObj) {
        var query = JSON.parse(JSON.stringify(baseQuery));
        query.path = repoObj;
        xsRepo.request(query, function (error, data) {
            numDone += 1;
            if ( error ) {
                log.error("Error deleting " + repoObj + ": " + error.message);
            }
            else {
                log.info("Deleted: " + repoObj);
            }

            if ( numDone === numCalls ) {
                process.exit();
            }
        });
    });
}

function removeRepoObject() {
    console.log("Deleting repository objects");
    console.log("Hana Instance: '" + hanaInstance.target + "'");
    console.log("User: '" + hanaInstance.user + "'");
    if ( ! argv.active ) {
        console.log("Workspace: '" + hanaInstance.workspaceId + "'");
    }

    console.log("\nGoing to delete repository objects:\n");
    objectsToDelete.forEach(function (repoObj) {
        console.log(repoObj);
    });

    var rl = readline.createInterface({
            input:  process.stdin,
            output: process.stdout
    });


    rl.question("\nCorrect ? (y/n): ", function(answer) {
        if ( answer !== 'y' ) {
            console.log("aborted");
            process.exit();
        }

        doIt();

        rl.close();
    });
}


